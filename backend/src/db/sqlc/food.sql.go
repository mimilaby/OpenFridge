// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: food.sql

package db

import (
	"context"
	"time"
)

const addFood = `-- name: AddFood :one
INSERT INTO food (
  name,
  description,
  price,
  calories,
  weight,
  amount,
  weight_per_amount,
  photo,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, description, price, calories, weight, amount, weight_per_amount, photo, created_at, updated_at
`

type AddFoodParams struct {
	Name            string    `json:"name"`
	Description     string    `json:"description"`
	Price           string    `json:"price"`
	Calories        string    `json:"calories"`
	Weight          string    `json:"weight"`
	Amount          string    `json:"amount"`
	WeightPerAmount string    `json:"weight_per_amount"`
	Photo           string    `json:"photo"`
	UpdatedAt       time.Time `json:"updated_at"`
}

func (q *Queries) AddFood(ctx context.Context, arg AddFoodParams) (Food, error) {
	row := q.queryRow(ctx, q.addFoodStmt, addFood,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Calories,
		arg.Weight,
		arg.Amount,
		arg.WeightPerAmount,
		arg.Photo,
		arg.UpdatedAt,
	)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Calories,
		&i.Weight,
		&i.Amount,
		&i.WeightPerAmount,
		&i.Photo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFoodAvailable = `-- name: GetFoodAvailable :many
SELECT id, name, description, price, calories, weight, amount, weight_per_amount, photo, created_at, updated_at FROM food
WHERE amount > 0
`

func (q *Queries) GetFoodAvailable(ctx context.Context) ([]Food, error) {
	rows, err := q.query(ctx, q.getFoodAvailableStmt, getFoodAvailable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Food
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Calories,
			&i.Weight,
			&i.Amount,
			&i.WeightPerAmount,
			&i.Photo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
